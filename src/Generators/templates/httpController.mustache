'use strict'

const { ForbiddenError } = require('@casl/ability')
const { permittedFieldsOf } = require('@casl/ability/extra')
const pick = require('lodash.pick')

{{#resource}}
/**
 * Resourceful controller for interacting with {{resourceNamePlural}}
 */
{{/resource}}
class {{name}} {

  static get inject () {
    /**
    * Injetando models por aqui, basta respeitar a mesma ordem no constructor
    */
    return [
       'App/Models/{{oldname}}',
    ]
  }


  constructor ({{oldname}}) {
    this.{{resourceName}} = {{oldname}}
  }


  {{#resource}}
  /**
   * Show a list of all {{resourceNamePlural}}.
   * GET {{resourceNamePlural}}
   */
  async index ({ request, request: { useClientDB }, response }) {
    try{
      // checando se o usuário pode realizar a ação requisitada
      request.auth.rules.throwUnlessCan('read', {{oldname}});

      return await this.{{resourceName}}(useClientDB).accessibleBy(request.auth.rules)
    }
    catch(err){
      // console.log(err);

      if (err instanceof ForbiddenError) return response.badRequest({ error: 'Você não tem permissão para acessar este recurso' })

      return response.badRequest({ error : 'Houve um erro interno: {{name}}.index'})
    }
  }

  /**
   * Create/save a new {{resourceName}}.
   * POST {{resourceNamePlural}}
   */
   async store ({ request, request: { useClientDB }, response }) {
    try{

      // checando se o usuário pode realizar a ação requisitada
      request.auth.rules.throwUnlessCan('create', '{{oldname}}');
      return await this.{{resourceName}}(useClientDB).create({ ...request.body });

    }
    catch(err){
      // console.log(err);

      if (err instanceof ForbiddenError) return response.badRequest({ error: 'Você não tem permissão para acessar este recurso' })

      if (err.name === 'ValidationError') return response.badRequest(err);

      return response.badRequest({ error : 'Houve um erro interno: {{name}}.store'})
    }
  }

  /**
   * Display a single {{resourceName}}.
   * GET {{resourceNamePlural}}/:id
   */
  async show ({ request, request: { useClientDB }, response, params }) {
    try{
      // checando se o usuário pode realizar a ação requisitada
      request.auth.rules.throwUnlessCan('read', '{{oldname}}');

      return await this.{{resourceName}}(useClientDB).accessibleBy(request.auth.rules).findById(params.id);
    }
    catch(err){
      // console.log(err);

      if (err instanceof ForbiddenError) return response.badRequest({ error: 'Você não tem permissão para acessar este recurso' })

      return response.badRequest({ error : 'Houve um erro interno: {{name}}.show'})
    }
  }

  /**
   * Update {{resourceName}} details.
   * PUT or PATCH {{resourceNamePlural}}/:id
   */
  async update ({ request, request: { useClientDB }, response, params }) {
     try {

      // checando se o usuário pode realizar a ação requisitada
      request.auth.rules.throwUnlessCan('update', '{{oldname}}');

      // para usarmos a validação automática do mongoose
      const {{resourceName}} = await this.{{resourceName}}(useClientDB).accessibleBy(request.auth.rules).findOne({ _id: params.id });

      if (!{{resourceName}}) return response.badRequest({ error: 'Não foi encontrado registro com o ID informado ou não possui permissão para continuar este ação' });

      const allowedFields = permittedFieldsOf(request.auth.rules, 'update', 'Foo');
      const body = pick(request.body, allowedFields);

      await {{resourceName}}.set(body);
      return await {{resourceName}}.save();

    }
    catch(err){
      // console.log(err);

      if (err.name === 'ValidationError') {
        return response.badRequest({ errors: err.errors });
      }

      if (err instanceof ForbiddenError) return response.badRequest({ error: 'Você não tem permissão para acessar este recurso' })

      return response.badRequest({ error : 'Houve um erro interno: {{name}}.update'})
    }
  }

  /**
   * Delete a {{resourceName}} with id.
   * DELETE {{resourceNamePlural}}/:id
   */
  async destroy ({ request, request: { useClientDB }, response, params }) {
    try{

      // checando se o usuário pode realizar a ação requisitada
      request.auth.rules.throwUnlessCan('delete', '{{oldname}}');

      const {{resourceName}} = await this.{{resourceName}}(useClientDB).accessibleBy(request.auth.rules).findOne({ _id: params.id })

      if (!{{resourceName}}) return response.badRequest({ error: 'Não foi encontrado foo com o ID informado ou não possui permissão para continuar este ação' })

      {{resourceName}}.remove();

      return response.ok();
    }
    catch(err){
      // console.log(err);

      if (err instanceof ForbiddenError) return response.badRequest({ error: 'Você não tem permissão para acessar este recurso' })

      return response.badRequest({ error : 'Houve um erro interno: {{name}}.destroy'})
    }
  }
  {{/resource}}
}

module.exports = {{name}}
