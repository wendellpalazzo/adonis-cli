'use strict'

{{#resource}}
/**
 * Resourceful controller for interacting with {{resourceNamePlural}}
 */
{{/resource}}
class {{name}} {

  static get inject () {
    /**
    * Injetando models por aqui, basta respeitar a mesma ordem no constructor
    */
    return [
       'App/Models/{{oldname}}',
    ]
  }


  constructor ({{oldname}}) {
    this.{{resourceName}} = {{oldname}}
  }


  {{#resource}}
  /**
   * Show a list of all {{resourceNamePlural}}.
   * GET {{resourceNamePlural}}
   */
  async index ({ request, request: { useClientDB }, response }) {
    try{
      return await this.{{resourceName}}(useClientDB).find();
    }
    catch(err){
      // console.log(err);
      return response.badRequest({ error : 'Error loading {{name}}.index'})
    }
  }

  /**
   * Create/save a new {{resourceName}}.
   * POST {{resourceNamePlural}}
   */
   async store ({ request, request: { useClientDB }, response }) {
    try{
      return await this.{{resourceName}}(useClientDB).create({ ...request.body });
    }
    catch(err){
      // console.log(err);
      return response.badRequest({ error : 'Error loading {{name}}.store'})
    }
  }

  /**
   * Display a single {{resourceName}}.
   * GET {{resourceNamePlural}}/:id
   */
  async show ({ request, request: { useClientDB }, response, params }) {
    try{
      return await this.{{resourceName}}(useClientDB).findById(params.id);
    }
    catch(err){
      // console.log(err);
      return response.badRequest({ error : 'Error loading {{name}}.show'})
    }
  }

  /**
   * Update {{resourceName}} details.
   * PUT or PATCH {{resourceNamePlural}}/:id
   */
  async update ({ request, request: { useClientDB }, response, params }) {
     try {
      // para usarmos a validação automática do mongoose
      // se precisamos usar o método completo usando o findById
      const {{resourceName}} = await this.{{resourceName}}(useClientDB).findById(params.id);
      await {{resourceName}}.set({ ...request.body });
      return await {{resourceName}}.save();

      // senão, esta opção eh a mais rápida e eficiente
      // return await this.{{resourceName}}(useClientDB).findByIdAndUpdate(params.id, { // ...request.body }, { new: true });
    }
    catch(err){
      // console.log(err);
    return response.badRequest({ error : 'Error loading {{name}}.update'})
    }
  }

  /**
   * Delete a {{resourceName}} with id.
   * DELETE {{resourceNamePlural}}/:id
   */
  async destroy ({ request, request: { useClientDB }, response, params }) {
    try{
      await this.{{resourceName}}(useClientDB).findByIdAndRemove(params.id);
      return response.ok();
    }
    catch(err){
      // console.log(err);
      return response.badRequest({ error : 'Error loading {{name}}.destroy'})
    }
  }
  {{/resource}}
}

module.exports = {{name}}
