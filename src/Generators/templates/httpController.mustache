'use strict'

const Logger = use('Logger');
const { ForbiddenError } = require('@casl/ability')
const pick = require('lodash.pick')

{{#resource}}
/**
 * Resourceful controller for interacting with {{resourceNamePlural}}
 */
{{/resource}}
class {{name}} {
  static get inject () {
    /**
    * Injetando models por aqui, basta respeitar a mesma ordem no constructor
    */
    return [
      'App/Models/{{oldname}}',
    ]
  }


  constructor ({{oldname}}) {
    this.{{resourceName}} = {{oldname}}
  }


  {{#resource}}
  /**
   * Show a list of all {{resourceNamePlural}}.
   * GET {{resourceNamePlural}}
   */
  async index ({ request, request: { useClientDB, aqp }, response }) {
    try {
      // checando se o usuário pode realizar a ação requisitada
      request.auth.rules.throwUnlessCan('read', '{{oldname}}');

      // aqp.cleanFilter(); // '','',''.....

     return await this.{{resourceName}}(useClientDB).paginate(aqp.filter, {
        select: aqp.projection,
        sort: { ...aqp.sort },
        page: aqp.page,
        limit: aqp.limit,
        collation: aqp.collation,
        leanWithId: false,
        lean: false,
      });

      // return await this.{{resourceName}}(useClientDB).find().accessibleBy(request.auth.rules)
    } catch (err) {
      // console.log(err);
      Logger.info(`Critical error on @index ${__filename}`, err);


      if (err instanceof ForbiddenError) return response.badRequest({ error: 'Você não tem permissão para acessar este recurso' })

      return response.badRequest({ error: 'Houve um erro interno: {{name}}.index', message: err.toString() })
    }
  }

  /**
   * Create/save a new {{resourceName}}.
   * POST {{resourceNamePlural}}
   */
  async store ({ request, request: { useClientDB }, response }) {
    try {
      // checando se o usuário pode realizar a ação requisitada
      request.auth.rules.throwUnlessCan('create', '{{oldname}}');
      const doc = await this.{{resourceName}}(useClientDB)
        .create({ ...request.body });

      await doc.usuarioFezAlteracao(request.auth.user, true)
      return await doc.save();
    } catch (err) {
      // console.log(err);
      Logger.info(`Critical error on @store ${__filename}`, err);

      if (err.name === 'MongoError') return response.badRequest({ error: err })

      if (err instanceof ForbiddenError) return response.badRequest({ error: 'Você não tem permissão para acessar este recurso' })

      if (err.name === 'ValidationError') return response.badRequest({ error: err.errors });

      return response.badRequest({ error: 'Houve um erro interno: {{name}}.store', message: err.toString() })
    }
  }

  /**
   * Display a single {{resourceName}}.
   * GET {{resourceNamePlural}}/:id
   */
  async show ({ request, request: { useClientDB }, response, params }) {
    try {
      // checando se o usuário pode realizar a ação requisitada
      request.auth.rules.throwUnlessCan('read', '{{oldname}}');

      const doc = await this.{{resourceName}}(useClientDB)
        .findOne({ _id: params.id })
        .accessibleBy(request.auth.rules)

      if (!doc) return response.badRequest({ error: 'Não foi encontrado registro com o ID informado ou não possui permissão para continuar este ação' })

      return doc;
    } catch (err) {
      // console.log(err);
      Logger.info(`Critical error on @show ${__filename}`, err);

      if (err.name === 'MongoError') return response.badRequest({ error: err })

      if (err instanceof ForbiddenError) return response.badRequest({ error: 'Você não tem permissão para acessar este recurso' })

      return response.badRequest({ error: 'Houve um erro interno: {{name}}.show', message: err.toString() })
    }
  }

  /**
   * Update {{resourceName}} details.
   * PUT or PATCH {{resourceNamePlural}}/:id
   */
  async update ({ request, request: { useClientDB }, response, params }) {
    try {
      // checando se o usuário pode realizar a ação requisitada
      request.auth.rules.throwUnlessCan('update', '{{oldname}}');

      // para usarmos a validação automática do mongoose
      const doc = await this.{{resourceName}}(useClientDB)
        .findOne({ _id: params.id })
        .accessibleBy(request.auth.rules)

      if (!doc) return response.badRequest({ error: 'Não foi encontrado registro com o ID informado ou não possui permissão para continuar este ação' });

      const allowedFields = doc.accessibleFieldsBy(request.auth.rules, 'update', '{{oldname}}');
      const body = pick(request.body, allowedFields);

      await doc.set(body);
      await doc.usuarioFezAlteracao(request.auth.user)
      return await doc.save();
    } catch (err) {
      // console.log(err);
      Logger.info(`Critical error on @update ${__filename}`, err);

      if (err.name === 'MongoError') return response.badRequest({ error: err })

      if (err.name === 'ValidationError') {
        return response.badRequest({ error: err.errors });
      }

      if (err instanceof ForbiddenError) return response.badRequest({ error: 'Você não tem permissão para acessar este recurso' })

      return response.badRequest({ error: 'Houve um erro interno: {{name}}.update', message: err.toString() })
    }
  }

  /**
   * Delete a {{resourceName}} with id.
   * DELETE {{resourceNamePlural}}/:id
   * estamos usando softdelete para mais veja em
   * mongoose-delete (https://www.npmjs.com/package/mongoose-delete)
   */
  async destroy ({ request, request: { useClientDB }, response, params }) {
    try {
      // checando se o usuário pode realizar a ação requisitada
      request.auth.rules.throwUnlessCan('delete', '{{oldname}}');

      const doc = await this.{{resourceName}}(useClientDB)
        .findOne({ _id: params.id })
        .accessibleBy(request.auth.rules)

      if (!doc) return response.badRequest({ error: 'Não foi encontrado registro com o ID informado ou não possui permissão para continuar este ação' })

      doc.delete();
      doc.usuarioFezExclusao(request.auth.user);

      return response.ok();
    } catch (err) {
      // console.log(err);
      Logger.info(`Critical error on @delete ${__filename}`, err);

      if (err.name === 'MongoError') return response.badRequest({ error: err })

      if (err instanceof ForbiddenError) return response.badRequest({ error: 'Você não tem permissão para acessar este recurso' })

      return response.badRequest({ error: 'Houve um erro interno: {{name}}.destroy', message: err.toString() })
    }
  }
  {{/resource}}
}

module.exports = {{name}}
